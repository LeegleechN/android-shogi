note: this is for single-threaded, no ponder usage



use "ini" to create a new ptree (game state).

tree_t * ptree;
ini(ptree);

then use the various "cmd_x" functions in proce.c:

static int cmd_usrmove( tree_t * restrict ptree, const char *str_move,
			char **last );
static int cmd_move_now( void );
static int cmd_ponder( char **lasts );
static int cmd_limit( char **lasts );
static int cmd_quit( void );
static int cmd_beep( char **lasts );
static int cmd_peek( char **lasts );
static int cmd_hash( char **lasts );
static int cmd_ping( void );
static int cmd_suspend( void );
static int cmd_problem( tree_t * restrict ptree, char **lasts );
static int cmd_display( tree_t * restrict ptree, char **lasts );
static int cmd_move( tree_t * restrict ptree, char **lasts );
static int cmd_new( tree_t * restrict ptree, char **lasts );
static int cmd_read( tree_t * restrict ptree, char **lasts );
static int cmd_resign( tree_t * restrict ptree, char **lasts );
static int cmd_time( char **lasts );
static int is_move( const char *str );

In particular, cmd_move(tree,NULL) will have the computer move, and cmd_move(tree,"7677FU") will have the player move (not sure about the format)

Not sure how to get the move easily back. I can have cmd_move return the int version and parse that. Or I could just look at the tree itself and see what's changed. Ideally I'd like to get the computer's move back in the notational format. Maybe the int version is easy to convert to that.

After done, finish using fin().